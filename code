#include "USBHost_t36.h"


USBHost myusb;
USBHIDParser hid1(myusb);
JoystickController joystick(myusb);
BluetoothController bluet(myusb, true, "0000");

// Direction Pins
int IN1 = 2;  // Front-left wheel (V1)
int IN2 = 0;  // Front-right wheel (V2)
int IN3 = 6;  // Rear-left wheel (V3)
int IN4 = 4;  // Rear-right wheel (V4)

// PWM pins 
int ENA = 3;  // Front-left wheel (V1)
int ENB = 1;  // Front-right wheel (V2)
int ENC = 7;  // Rear-left wheel (V3)
int END = 5;  // Rear-right wheel (V4)

// Joystick axes
int rightX, rightY, leftX;

void setup() {
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(ENA, OUTPUT);
  pinMode(ENB, OUTPUT);
  pinMode(ENC, OUTPUT);
  pinMode(END, OUTPUT);

  // Teensy check
  pinMode(13, OUTPUT);
  digitalWrite(13, HIGH);

  Serial.begin(9600);
  myusb.begin();
  delay(2000);

  // Turn motors off initially
  analogWrite(ENA, 0);
  analogWrite(ENB, 0);
  analogWrite(ENC, 0);
  analogWrite(END, 0);
}

void loop() {
  myusb.Task();

  if (joystick.available()) {
    // Read joystick inputs
    int leftStickX = joystick.getAxis(0);  // Left joystick x-axis for rotation
    leftX = map(leftStickX, 0, 255, -127, 127);

    int rightStickX = joystick.getAxis(2);  // Right joystick x-axis
    rightX = map(rightStickX, 0, 255, -127, 127);

    int rightStickY = joystick.getAxis(5);  // Right joystick y-axis
    rightY = map(rightStickY, 0, 255, 127, -127);
  } else {
    Serial.println("Joystick Not Found");
    return;
  }

  // equations for inverse kinematics
  int V1 = rightY + rightX + leftX; // Front-left wheel
  int V2 = rightY - rightX + leftX; // Front-right wheel
  int V3 = rightY - rightX - leftX; // Rear-left wheel
  int V4 = rightY + rightX - leftX; // Rear-right wheel

  // Debugging outputs
  Serial.print("V1: "); 
  Serial.println(V1);
  Serial.print("V2: "); 
  Serial.println(V2);
  Serial.print("V3: "); 
  Serial.println(V3);
  Serial.print("V4: ");
  Serial.println(V4);
  delay(1000);
}
  // Run motors
  runMotor(IN1, ENA, V1);
  runMotor(IN2, ENB, V2);
  runMotor(IN3, ENC, V3);
  runMotor(IN4, END, V4);

  delay(200); 


// Function to control a motor
void runMotor(int IN, int EN, int speed) {
  int pwmValue = map(abs(speed), 0, 127, 0, 255);  // Scale speed to PWM
  pwmValue = constrain(pwmValue, 0, 255);

  if (speed > 0) {
    digitalWrite(IN, HIGH);  // Forward
  } else if (speed < 0) {
    digitalWrite(IN, LOW);   // Backward
  } else {
    pwmValue = 0;            // Stop 
  }

  analogWrite(EN, pwmValue);

  // Debugging output
  Serial.print("Motor PWM: ");
  Serial.println(pwmValue);
}
